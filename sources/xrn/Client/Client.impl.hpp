#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Constructor
///
///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> ::xrn::network::AClient<UserEnum>::AClient()
    : m_connection{ nullptr }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> ::xrn::network::AClient<UserEnum>::~AClient() = default;

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> ::xrn::network::AClient<UserEnum>::AClient(
    AClient&& that
) noexcept = default;

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> auto ::xrn::network::AClient<UserEnum>::operator=(
    AClient&& that
) noexcept
    -> AClient& = default;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Events
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> auto ::xrn::network::AClient<UserEnum>::onConnect(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> target
) -> bool
{
    XRN_LOG("C{}: connected to C{}", m_connection->getId(), target->getId());
    return true;
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> void ::xrn::network::AClient<UserEnum>::onDisconnect(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> target
)
{
    XRN_LOG("C{}: disconnected from C{}", m_connection->getId(), target->getId());
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> auto ::xrn::network::AClient<UserEnum>::onSend(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> target
    , ::xrn::network::Message<UserEnum>& message
) -> bool
{
    XRN_LOG(
        "C{} -> C{}: '{}'",
        m_connection->getId(), target->getId(), message.getAsString()
    );
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> void ::xrn::network::AClient<UserEnum>::onReceive(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> target
    , ::xrn::network::Message<UserEnum>& message
)
{
    XRN_LOG(
        "C{} <- C{}: '{}'",
        m_connection->getId(), target->getId(), message.getAsString()
    );
}
