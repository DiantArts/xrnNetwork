#pragma once

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Network/Detail/Constraint.hpp>


namespace xrn::network::server {

///////////////////////////////////////////////////////////////////////////
/// \brief Allows simple Time manipulations
/// \ingroup network
///
/// \include Time.hpp <xrn/Util/Time.hpp>
///
/// ::xrn::network::server::Server's purpuse is to provide abstracted
/// functionalities that can be implemented.
///
/// Usage example:
/// \code
/// \endcode
///
///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::isValidEnum UserEnum
> class Server
    : public ::xrn::network::AClient<UserEnum>
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit AServer(
        ::std::uint16_t port
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// Clears the registry opon destruction.
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~Server();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Server(
        const Server& other
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const Server& other
    ) noexcept
        -> Server& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Server(
        Server&& that
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        Server&& that
    ) noexcept
        -> Server&;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Run managment
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Start the server
    ///
    /// \return True if the server started successfully, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] virtual auto start()
        -> bool = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Stop the server
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void stop() = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Check whether the server is running or not
    ///
    /// \return True if the server is started and running
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] virtual auto isRunning()
        -> bool = 0;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Run managment
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a message over UDP to the clients given as argument
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void send(
        const ::xrn::network::Message<UserEnum>& message,
        ::xrn::meta::constraint::sameAs<::std::shared_ptr<
            ::xrn::network::Connection<UserMessageType>
        >> auto... clients
    ) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a message over UDP to the clients given as argument
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void send(
        const ::xrn::network::Message<UserEnum>& message,
        ::xrn::meta::constraint::sameAs<::std::shared_ptr<
            ::xrn::network::Id
        >> auto... clients
    ) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a message over UDP to all clients execpt the one in
    /// argument
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void sendToAll(
        const ::xrn::network::Message<UserEnum>& message,
        ::xrn::meta::constraint::sameAs<::std::shared_ptr<
            ::xrn::network::Connection<UserMessageType>
        >> auto... ignoredClients
    ) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a message over UDP to all clients execpt the one in
    /// argument
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void sendToAll(
        const ::xrn::network::Message<UserEnum>& message,
        ::xrn::meta::constraint::sameAs<::std::shared_ptr<
            ::xrn::network::Id
        >> auto... ignoredClients
    ) = 0;


};

} // namespace xrn::network::server

///////////////////////////////////////////////////////////////////////////
// Implementation Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Network/Server/Server.impl.hpp>
