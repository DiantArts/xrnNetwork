#pragma once

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Network/AClient.hpp>

namespace xrn::network::client {

///////////////////////////////////////////////////////////////////////////
/// \brief Interface detailing basic clients' features
/// \ingroup network
///
/// \include Client.hpp <xrn/Network/Client/Client.hpp>
///
/// ::xrn::network::Client's purpuse is simplify data share by providing a
/// simple way to regroup and act onto multiple data into a single object.
/// The client is designed as Event programming and the user must implement
/// the on... methods to interact with it
///
/// \see ::xrn::network::IClient, ::xrn::network::Message
///
///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::isValidEnum UserEnum
> class Client
    : public ::xrn::network::AClient<UserEnum>
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Client();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Construct and connect
    ///
    /// Call connectToServer()
    ///
    /// \see connectToServer()
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit Client(
        const ::std::string& host
        , ::std::uint16_t port
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Rule of 5
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// Clears the registry opon destruction.
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~Client();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Client(
        const Client& other
    ) noexcept = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Copy assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        const Client& other
    ) noexcept
        -> Client& = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    Client(
        Client&& that
    ) noexcept;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Move assign operator
    ///
    ///////////////////////////////////////////////////////////////////////////
    auto operator=(
        Client&& that
    ) noexcept
        -> Client&;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Connection
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Connect to the Server
    ///
    /// \param host String containing the IP address
    /// \param port Port hosting the server at the specified IP address
    ///
    /// \return True if successfully connected to the server, false otherwise
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto connectToServer(
        const ::std::string& host
        , ::std::uint16_t port
    ) -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Disconnect from the server
    ///
    /// closes the connection
    ///
    ///////////////////////////////////////////////////////////////////////////
    void disconnectFromServer();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Connect to the Server
    ///
    /// \param host String containing the IP address
    /// \param port Port hosting the server at the specified IP address
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto isConnectedToServer() const
        -> bool;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Delete the connection from the server
    ///
    ///////////////////////////////////////////////////////////////////////////
    void removeConnection(
        ::std::shared_ptr<::xrn::network::Connection<UserEnum>> _ [[ maybe_unused ]]
    ) override final;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Tcp
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a system message to the server
    ///
    /// \param messageType Type of message sent
    /// \param args Arguments to fill the message
    ///
    /// \see ::xrn::network::Message
    ///
    ///////////////////////////////////////////////////////////////////////////
    void tcpSendToServer(
        typename ::xrn::network::Message<UserEnum>::SystemType messageType,
        auto&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a user message to the server
    ///
    /// \param messageType Type of message sent
    /// \param args Arguments to fill the message
    ///
    /// \see ::xrn::network::Message
    ///
    ///////////////////////////////////////////////////////////////////////////
    void tcpSendToServer(
        UserEnum messageType,
        auto&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a message to the server
    ///
    /// \param messageType Type of message sent
    /// \param args Arguments to fill the message
    ///
    /// \see ::xrn::network::Message
    ///
    ///////////////////////////////////////////////////////////////////////////
    void tcpSendToServer(
        ::xrn::network::Message<UserEnum>& message
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a message to the server
    ///
    /// \param messageType Type of message sent
    /// \param args Arguments to fill the message
    ///
    /// \see ::xrn::network::Message
    ///
    ///////////////////////////////////////////////////////////////////////////
    void tcpSendToServer(
        ::xrn::network::Message<UserEnum>&& message
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Udp
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a system message to the server
    ///
    /// \param messageType Type of message sent
    /// \param args Arguments to fill the message
    ///
    /// \see ::xrn::network::Message
    ///
    ///////////////////////////////////////////////////////////////////////////
    void udpSendToServer(
        typename ::xrn::network::Message<UserEnum>::SystemType messageType,
        auto&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a user message to the server
    ///
    /// \param messageType Type of message sent
    /// \param args Arguments to fill the message
    ///
    /// \see ::xrn::network::Message
    ///
    ///////////////////////////////////////////////////////////////////////////
    void udpSendToServer(
        UserEnum messageType,
        auto&&... args
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a message to the server
    ///
    /// \param messageType Type of message sent
    /// \param args Arguments to fill the message
    ///
    /// \see ::xrn::network::Message
    ///
    ///////////////////////////////////////////////////////////////////////////
    void udpSendToServer(
        ::xrn::network::Message<UserEnum>& message
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Send a message to the server
    ///
    /// \param messageType Type of message sent
    /// \param args Arguments to fill the message
    ///
    /// \see ::xrn::network::Message
    ///
    ///////////////////////////////////////////////////////////////////////////
    void udpSendToServer(
        ::xrn::network::Message<UserEnum>&& message
    );



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Incomming messages
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Handle if the message is a system message
    ///
    /// \param message Message to handle
    /// \param connection Connection that sent the message
    ///
    /// \return True if the message was handled, false otherwise
    ///
    /// \see ::xrn::network::Message, ::xrn::network::Connection
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] virtual auto handleIncommingSystemMessages(
        ::std::shared_ptr<::xrn::network::Connection<UserEnum>> connection
        , ::xrn::network::Message<UserEnum>& message
    ) -> bool override;



protected:


    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Members
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Connection to the server
    ///
    /// Safe UDP connection
    ///
    ///////////////////////////////////////////////////////////////////////////
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> m_connection;

};

} // namespace xrn::network

///////////////////////////////////////////////////////////////////////////
// Implementation Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Network/Client/Client.impl.hpp>
