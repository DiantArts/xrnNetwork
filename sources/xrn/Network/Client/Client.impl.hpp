#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Constructor
///
///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> ::xrn::network::client::Client<UserEnum>::Client()
    : m_connection{ nullptr }
{}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Rule of 5
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> ::xrn::network::client::Client<UserEnum>::~Client() = default;

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> ::xrn::network::client::Client<UserEnum>::Client(
    Client&& that
) noexcept = default;

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> auto ::xrn::network::client::Client<UserEnum>::operator=(
    Client&& that
) noexcept
    -> Client& = default;



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Incomming messages
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
/// \brief Handle if the message is a system message
///
/// \param message Message to handle
/// \param connection Connection that sent the message
///
/// \return True if the message was handled, false otherwise
///
/// \see ::xrn::network::Message, ::xrn::network::Connection
///
///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> auto ::xrn::network::client::Client<UserEnum>::handleIncommingSystemMessages(
    ::xrn::network::Message<UserEnum>& message
    , ::std::shared_ptr<::xrn::network::Connection<UserEnum>> connection
) -> bool
{
    return false;
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Events
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> auto ::xrn::network::client::Client<UserEnum>::onConnect(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> target
) -> bool
{
    XRN_LOG("C{}: connected to C{}", m_connection->getId(), target->getId());
    return true;
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> void ::xrn::network::client::Client<UserEnum>::onDisconnect(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> target
)
{
    XRN_LOG("C{}: disconnected from C{}", m_connection->getId(), target->getId());
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> auto ::xrn::network::client::Client<UserEnum>::onSend(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> target
    , ::xrn::network::Message<UserEnum>& message
) -> bool
{
    XRN_LOG(
        "C{} -> C{}: '{}'",
        m_connection->getId(), target->getId(), message.getAsString()
    );
}

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> void ::xrn::network::client::Client<UserEnum>::onReceive(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> target
    , ::xrn::network::Message<UserEnum>& message
)
{
    XRN_LOG(
        "C{} <- C{}: '{}'",
        m_connection->getId(), target->getId(), message.getAsString()
    );
}
