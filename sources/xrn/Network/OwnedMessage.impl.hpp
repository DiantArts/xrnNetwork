#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Constructors
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::isValidEnum UserEnum
> ::xrn::network::OwnedMessage<UserEnum>::OwnedMessage(
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> owner
    , auto&&... args
) noexcept
    : ::xrn::network::Message<UserEnum>{ ::std::forward<decltype(args)>(args)... }
    , m_owner{ owner }
{
}



///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
// Getters
//
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::isValidEnum UserEnum
> auto ::xrn::network::OwnedMessage<UserEnum>::getOwner()
    -> ::std::shared_ptr<::xrn::network::Connection<UserEnum>>
{
    return m_owner;
}
