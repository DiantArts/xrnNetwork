#pragma once

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Network/Detail/Constraint.hpp>
#include <xrn/Network/Message.hpp>

///////////////////////////////////////////////////////////////////////////
// Forward declarations
///////////////////////////////////////////////////////////////////////////
namespace xrn::network {
    template <::xrn::network::detail::constraint::hasValueLast UserEnum> class Connection;
}

namespace xrn::network {

///////////////////////////////////////////////////////////////////////////
/// \brief Allows to dynamically store polymorphic data so it can be sent
/// \ingroup network
///
/// \include OwnedMessage.hpp <xrn/Network/OwnedMessage.hpp>
///
/// ::xrn::network::OwnedMessage's purpuse is simplify data sharing by providing
/// a simple way to regroup and act onto multiple polymorphic data into a
/// single object. This message works like a queue (FIFO)
///
/// Usage example:
/// \code
/// enum MessageType { start, stop, last };
/// ::xrn::network::OwnedMessage<MessageType> m{ MessageType::start, "hello", "you"s, "are"sv };
/// ::std::vector<short> vec{ 5, 3 };
/// m.push(::std::move(vec));
/// auto str1{ m.pull<char*>() };
/// auto str2{ m.pull<char*>() };
/// auto str3{ m.pull<char*>() };
/// auto v1{ m.pull<short*>() };
/// ::fmt::print("{} {} {} {} {} {}\n", str1, str2, str3, v1.size(), v1[0], v1[1]); // output: hello you are 2 5 3
/// \endcode
///
///
///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::hasValueLast UserEnum
> class OwnedMessage
    : public ::xrn::network::Message<UserEnum>
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// Arguments are perfectly forwarded to the constructor of the message.
    /// Copies and move constructors are possible
    ///
    /// \arg owner Remote client that sent the message
    /// \arg args Arguments to construct the message
    ///
    /// \see ::xrn::network::Message, ::xrn::network::Connection
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit OwnedMessage(
        ::std::shared_ptr<::xrn::network::Connection<UserEnum>> owner
        , auto&&... args
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the sender of the message[
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getOwner()
        -> ::std::shared_ptr<::xrn::network::Connection<UserEnum>>;




private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Members
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Contains information about the content of the body
    ///
    ////////////////////////////////////////////////////////////
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> m_owner;

};

} // namespace xrn::network

///////////////////////////////////////////////////////////////////////////
// Implementation Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Network/OwnedMessage.impl.hpp>
