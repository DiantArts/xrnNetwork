#pragma once

///////////////////////////////////////////////////////////////////////////
// Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Network/Detail/Constraint.hpp>
#include <xrn/Network/Message.hpp>

///////////////////////////////////////////////////////////////////////////
// Forward declarations
///////////////////////////////////////////////////////////////////////////
namespace xrn::network {
    template <::xrn::network::detail::constraint::isValidEnum UserEnum> class Connection;
}

namespace xrn::network {

///////////////////////////////////////////////////////////////////////////
/// \brief Combinaison of a message and a connection
/// \ingroup network
///
/// \include OwnedMessage.hpp <xrn/Network/OwnedMessage.hpp>
///
///
///////////////////////////////////////////////////////////////////////////
template <
    ::xrn::network::detail::constraint::isValidEnum UserEnum
> class OwnedMessage
{

public:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Constructor
    ///
    /// Arguments are perfectly forwarded to the constructor of the message.
    /// Copies and move constructors are possible
    ///
    /// \arg owner Remote client that sent the message
    /// \arg args Arguments to construct the message
    ///
    /// \see ::xrn::network::Message, ::xrn::network::Connection
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit OwnedMessage(
        ::std::shared_ptr<::xrn::network::Connection<UserEnum>> owner
        , ::std::unique_ptr<::xrn::network::Message<UserEnum>>&& message
    ) noexcept;



    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the sender of the message[
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getOwner()
        -> ::std::shared_ptr<::xrn::network::Connection<UserEnum>>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Get the sender of the message[
    ///
    ///////////////////////////////////////////////////////////////////////////
    [[ nodiscard ]] auto getMessage()
        -> ::std::unique_ptr<::xrn::network::Message<UserEnum>>&;




private:

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Members
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Contains the message
    ///
    ///////////////////////////////////////////////////////////////////////////
    ::std::unique_ptr<::xrn::network::Message<UserEnum>> m_message;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Contains information about the content of the body
    ///
    ///////////////////////////////////////////////////////////////////////////
    ::std::shared_ptr<::xrn::network::Connection<UserEnum>> m_owner;

};

} // namespace xrn::network

///////////////////////////////////////////////////////////////////////////
// Implementation Headers
///////////////////////////////////////////////////////////////////////////
#include <xrn/Network/OwnedMessage.impl.hpp>
